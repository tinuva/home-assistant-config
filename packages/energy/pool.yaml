---
input_boolean:
  pool_cover_on:
    name: Pool Cover On

input_datetime:
  pool_pump_on_time:
    name: Pool pump on time
    has_date: false
    has_time: true

timer:
  pool_pump:
    name: Pool pump
    duration: "04:00:00"
    restore: true
  pool_pump_grid_pause:
    name: Pool pump - grid pause
    duration: "00:05:00"
    restore: true

automation:
  # Pool pump on based on input time
  - alias: Turn on pool pump
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.pool_pump_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      # - platform: numeric_state
      #   entity_id: sensor.main_bathroom_geyser_energy_power
      #   below: '100'
      #   for:
      #     seconds: 60
      #- platform: numeric_state
      #  entity_id: sensor.main_bathroom_geyser_energy_power
      #  below: '50'
    condition:
      # - condition: numeric_state
      #   entity_id: sensor.average_temperature_outside_last_1_day
      #   above: '19.5'
      - condition: template
        value_template: "{{ trigger.from_state and trigger.from_state.state != 'unavailable' }}"
      #- condition: state
      #  entity_id: timer.loadshedding_slot
      #  state: 'idle'
      #- condition: state
      #  entity_id: sensor.grid_mode
      #  state: '1'
    action:
      - choose:
          # Morning
          - conditions:
              - condition: time
                after: "9:00:00"
                before: "16:00:00"
              - condition: numeric_state
                entity_id: sensor.solcast_pv_forecast_forecast_remaining_today
                above: "17"
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: sensor.solcast_pv_forecast_forecast_remaining_today
                    above: "19"
                  #- condition: numeric_state
                  #  entity_id: sensor.battery_state_of_charge
                  #  above: '43'
            sequence:
              - alias: "Set variables"
                variables:
                  duration: >
                    {% set day_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
                    {% set today_name = day_names[now().weekday()] %}
                    {% set duration = 1 %}
                    {% if 25 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float%}{% set duration = 8 %}
                    {% elif 22 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 25 %}{% set duration = 7 %}
                    {% elif 20 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 22 %}{% set duration = 6 %}
                    {% elif 18 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 20 %}{% set duration = 5 %}
                    {% elif 17 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 18 %}{% set duration = 4 %}
                    {% else %}{% set duration = 1 %}{% endif -%}
                    {% if states('sensor.battery_state_of_charge')|float < 43 and duration > 3 %}{% set duration = 3 %}{% endif -%}
                    {{ duration|int * 60 * 60 }}
              - service: timer.start
                data_template:
                  entity_id: timer.pool_pump
                  duration: "{{ duration }}"
              - service: switch.turn_on
                data:
                  entity_id: switch.pool_pump_pool_pump
          # Afternoon after geyser
          - conditions:
              - condition: time
                after: "11:10:00"
                before: "16:00:00"
              - condition: numeric_state
                entity_id: sensor.solcast_pv_forecast_forecast_remaining_today
                above: "3"
            sequence:
              - service: timer.start
                data_template:
                  entity_id: timer.pool_pump
                  duration: >
                    {% set day_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
                    {% set today_name = day_names[now().weekday()] %}
                    {% if 5 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float %}{{ 4 * 60 | int * 60 }}
                    {% elif 4 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 5 %}{{ 3 * 60 | int * 60 }}
                    {% elif 3 <= states('sensor.solcast_pv_forecast_forecast_remaining_today')|float < 4 %}{{ 2 * 60 | int * 60 }}
                    {% else %}{{ 1 * 60 | int * 60 }}{% endif -%}
              - service: switch.turn_on
                data:
                  entity_id: switch.pool_pump_pool_pump
        default:
          - service: switch.turn_off
            entity_id: switch.pool_pump_pool_pump

  # start timer when turned on (2 min)
  - alias: Start timer after Turn on pool pump
    trigger:
      - platform: state
        entity_id: switch.pool_pump_pool_pump
        from: "off"
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: "off"
      - condition: state
        entity_id: timer.pool_pump
        state: "idle"
    action:
      - service: timer.start
        data_template:
          entity_id: timer.pool_pump
          duration: >
            {{ 2 | int * 60 }}

  # pool pump off when timer finish
  - alias: Turn off pool pump
    trigger:
      # Timer finished
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.pool_pump
      # If office AC is on at 12 turn off pool
      # - platform: template
      #   value_template: >
      #     {{ (now().time().strftime("%R") == "12:00" and (states('climate.midea_ac_32985348871179') == "cool") or (states('climate.midea_ac_32985348871179') == "heat") or (states('climate.midea_ac_32985348871179') == "dry") or (states('climate.midea_ac_32985348871179') == "auto")) }}
      # At 5pm
      - platform: time
        at: "15:00:00"
      # Additional checks if battery needs lots of charging
      # - platform: template
      #   value_template: >
      #     {{ (now().time().strftime("%R") == "11:30" and states('sensor.battery_state_of_charge')|int < 50) }}
      # - platform: template
      #   value_template: >
      #     {{ (now().time().strftime("%R") == "14:00" and states('sensor.battery_state_of_charge')|int < 60) }}
      # - platform: template
      #   value_template: >
      #     {{ (now().time().strftime("%R") == "15:00" and states('sensor.battery_state_of_charge')|int < 75) }}
      # - platform: template
      #   value_template: >
      #     {{ (now().time().strftime("%R") == "16:00" and states('sensor.battery_state_of_charge')|int < 89) }}
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.pool_pump_pool_pump
      - service: timer.finish
        data:
          entity_id: timer.pool_pump
