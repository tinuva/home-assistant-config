# ---
# automation:
  #### Loadshedding work-arounds
  # When in loadshedding, start timer and pause
  # - alias: Turn on Main geyser timer in loadshedding
  #   trigger:
  #     platform: template
  #     value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  #   condition:
  #     - condition: state
  #       entity_id: timer.loadshedding_slot
  #       state: 'active'
  #   action:
  #     - service: timer.start
  #       data_template:
  #         entity_id: timer.main_geyser
  #         duration: >
  #           {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
  #           {% set today_name = sensor_names[now().weekday()] %}
  #           {% if today_name == 'sunday' %}{{ 300 | int * 60 }}
  #           {% else %}{{ 180 | int * 60 }}{% endif -%}
  #     - delay: '00:00:01' # Waits 1 seconds
  #     - service: timer.pause
  #       data_template:
  #         entity_id: timer.main_geyser

  # # Resume Main geyser after loadshedding finished
  # - alias: Turn on Main geyser after loadshedding slot ended
  #   trigger:
  #     - platform: event
  #       event_type: timer.finished
  #       event_data:
  #         entity_id: timer.loadshedding_slot
  #   condition:
  #     - condition: state
  #       entity_id: timer.main_geyser
  #       state: 'paused'
  #   action:
  #     # Starts or restarts a timer with the provided duration.
  #     # If no duration is given, it will either restart with its initial
  #     # value, or continue a paused timer with the remaining duration.
  #     - service: timer.start
  #       data:
  #         entity_id: timer.main_geyser
  #     - service: switch.turn_on
  #       data:
  #         entity_id: switch.main_bathroom_geyser

  # Pause Main geyser if loadshedding slot started
  # - alias: Pause Main geyserif loadshedding slot started
  #   trigger:
  #     - platform: event
  #       event_type: timer.started
  #       event_data:
  #         entity_id: timer.loadshedding_slot
  #   condition:
  #     - condition: state
  #       entity_id: timer.main_geyser
  #       state: 'active'
  #   action:
  #     - service: timer.pause
  #       data:
  #         entity_id: timer.main_geyser
  #     - service: switch.turn_off
  #       data:
  #         entity_id: switch.main_bathroom_geyser

  ## Front Geyser
  # When in loadshedding, start timer and pause
  # - alias: Turn on Front geyser timer in loadshedding
  #   trigger:
  #     platform: template
  #     value_template: "{{ states('sensor.time') == (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  #   condition:
  #     - condition: state
  #       entity_id: timer.loadshedding_slot
  #       state: 'active'
  #   action:
  #     - service: timer.start
  #       data_template:
  #         entity_id: timer.front_geyser
  #         duration: >
  #           {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
  #           {% set today_name = sensor_names[now().weekday()] %}
  #           {% if today_name == 'sunday' %}{{ 300 | int * 60 }}
  #           {% else %}{{ 180 | int * 60 }}{% endif -%}
  #     - delay: '00:00:01' # Waits 1 seconds
  #     - service: timer.pause
  #       data_template:
  #         entity_id: timer.front_geyser

  # # Resume Front geyser after loadshedding finished
  # - alias: Turn on Front geyser after loadshedding slot ended
  #   trigger:
  #     - platform: event
  #       event_type: timer.finished
  #       event_data:
  #         entity_id: timer.loadshedding_slot
  #   condition:
  #     - condition: state
  #       entity_id: timer.front_geyser
  #       state: 'paused'
  #   action:
  #     # Starts or restarts a timer with the provided duration.
  #     # If no duration is given, it will either restart with its initial
  #     # value, or continue a paused timer with the remaining duration.
  #     - service: timer.start
  #       data:
  #         entity_id: timer.front_geyser
  #     - service: switch.turn_on
  #       data:
  #         entity_id: switch.front_bathroom_geyser

  # Pause Front geyser if loadshedding slot started
  # - alias: Pause Front geyserif loadshedding slot started
  #   trigger:
  #     - platform: event
  #       event_type: timer.started
  #       event_data:
  #         entity_id: timer.loadshedding_slot
  #   condition:
  #     - condition: state
  #       entity_id: timer.front_geyser
  #       state: 'active'
  #   action:
  #     - service: timer.pause
  #       data:
  #         entity_id: timer.front_geyser
  #     - service: switch.turn_off
  #       data:
  #         entity_id: switch.front_bathroom_geyser
