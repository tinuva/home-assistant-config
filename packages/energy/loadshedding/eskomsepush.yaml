---
### EskomSePush API Docs: https://documenter.getpostman.com/view/1296288/UzQuNk3E
### To sign up for a key, scroll down on their page for the API Request link: https://sepush.co.za/
### Direct link to sign-up form: https://docs.google.com/forms/d/e/1FAIpQLSeZhAkhDaQX_mLT2xn41TkVjLkOH3Py3YWHi_UqQP4niOY01g/viewform

### Using integration: https://github.com/wernerhp/ha.integration.load_shedding

# This rest sensor is to HA directly, to grab calendar.load_shedding_forecast and make a sensor with events
# rest:
#   - resource: http://localhost:8123/api/calendars/calendar.load_shedding_forecast
#     method: GET
#     scan_interval: 900
#     headers:
#       authorization: !secret ha_rest_bearer
#     params:
#       start: >
#         {{ utcnow().strftime('%Y-%m-%dT%H:%M:%S.000Z') }}
#       end: >
#         {{ (utcnow() + timedelta(days=5)).strftime('%Y-%m-%dT%H:%M:%S.000Z') }}
#     sensor:
#       - name: load_shedding_forecast
#         #value_template: "{{ value_json[0].start.dateTime }}"
#         value_template: >
#           {%- for event in value_json %}
#           {{ event.summary }}
#           {%- if event.start.dateTime %}{{ event.start.dateTime }}{%- endif %}
#           {%- endfor %}
# value_template: >
#   {{ value_json }}
# value_template: >
#   {{ value_json[0].summary }}
#   # {% for event in value_json %}
#   # {{ event.start }}
#   # {% endfor %}
#     {% if event.start.dateTime %}
#       {{ (event.start.dateTime | as_datetime).strftime('%Y-%m-%d %H:%M') }}: {{ event.summary }}
#     {% else %}
#       {{ event.start.date }}: {{ event.summary }}
#     {% endif %}
#   {% endfor %}

# rest:
#   - resource: !secret solcast_forecast_resource
#     #resource: https://api.solcast.com.au/rooftop_sites/RESOURCE_ID/forecasts?format=json&api_key=API_KEY&hours=72
#     scan_interval: '01:00:00' # RATE LIMIT!
#     sensor:
#       - name: "Solcast Forecast Data"
#         force_update: true
#         value_template: "{{ value_json.forecasts[0].pv_estimate|round(2) }}"
#         json_attributes:
#           - forecasts
#       - name: "Solcast Forecast 10"
#         force_update: true
#         value_template: "{{ value_json.forecasts[0].pv_estimate10|round(2) }}"
#       - name: "Solcast Forecast 90"
#         force_update: true
#         value_template: "{{ value_json.forecasts[0].pv_estimate90|round(2) }}"

sensor:
  # - platform: rest
  #   resource_template: http://localhost:8123/api/calendars/calendar.load_shedding_forecast
  #   name: Load Shedding Forecast
  #   headers:
  #     Authorization: !secret ha_rest_bearer
  #   params:
  #     start: >
  #       {{ utcnow().strftime('%Y-%m-%dT%H:%M:%S.000Z') }}
  #     end: >
  #       {{ (utcnow() + timedelta(days=5)).strftime('%Y-%m-%dT%H:%M:%S.000Z') }}
  #   # value_template: >
  #   #   {{ value_json }}
  #   value_template: >
  #     {% for event in value_json %}
  #       {% if event.start.dateTime %}
  #         {{ (event.start.dateTime | as_datetime).strftime('%Y-%m-%d %H:%M') }}: {{ event.summary }}
  #       {% else %}
  #         {{ event.start.date }}: {{ event.summary }}
  #       {% endif %}
  #     {% endfor %}

  # template sensors based on ESP above
  - platform: template
    sensors:
      loadshedding_slot_forecast:
        friendly_name: Loadshedding slot forecast
        unique_id: loadshedding_slot_forecast
        value_template: >
          {%- set show = namespace(count=1) -%}
          {% set area_sensor = "sensor.load_shedding_area_capetown_6_durbanville"%}
          {% set area_schedule = state_attr(area_sensor, "forecast") %}
          {%- set area_sc = namespace(count=area_schedule|count) -%}
          {%- set skip = namespace(next=false) -%}
          {% if area_sc.count > 0 %}
          {%- set data = namespace(count=1) -%}
          {%- set test = namespace(nextslot=False) -%}
          {%- for event in area_schedule -%}
          {% if data.count <= show.count < area_sc.count and skip.next == false  %}
          {%- set start = as_timestamp(event['start_time']) %}
          {%- set end = as_timestamp(event['end_time']) %}
          {%- set startdelta = as_timestamp(event['start_time'] + timedelta(minutes=30)) %}
          {%- if data.count < area_sc.count and area_schedule[data.count-1].end_time == area_schedule[data.count].start_time %}
          {{- start | timestamp_custom('%a %d %b:') }} {{- start | timestamp_custom(' %H:%M') }} to {{- as_timestamp(area_schedule[data.count].end_time) | timestamp_custom(' %H:%M') }}
          {{- '\n' -}}
          {%- set data.count = data.count + 1 %}
          {%- set skip.next = true %}
          {%- elif startdelta != end %}
          {{- start | timestamp_custom('%a %d %b:') }} {{- start | timestamp_custom(' %H:%M') }} to {{- end | timestamp_custom(' %H:%M') }}
          {{- '\n' -}}
          {%- set data.count = data.count + 1 %}
          {%-endif%}
          {%- set test.nextslot=False %}
          {%- elif skip.next == true %}
          {%- set skip.next = false %}
          {%-endif%}{%- endfor -%}
          {%-else%}
          None scheduled
          {%endif%}
      loadshedding_slot_next:
        friendly_name: Loadshedding slot next
        unique_id: loadshedding_slot_next
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 0 %}
          {{ as_timestamp(states['sensor.load_shedding_area_capetown_6_durbanville'].attributes.forecast[0]['start_time']) | timestamp_custom('%H:%M') }}
          {%else%}
          None scheduled
          {%endif%}
      loadshedding_slot_next_after:
        friendly_name: Loadshedding slot next after
        unique_id: loadshedding_slot_next_after
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 1 %}
          {{ as_timestamp(states['sensor.load_shedding_area_capetown_6_durbanville'].attributes.forecast[1]['start_time']) | timestamp_custom('%H:%M') }}
          {%else%}
          None scheduled
          {%endif%}
      time_till_loadshedding:
        friendly_name: Time until next loadshedding
        unique_id: Time_Until_Next_Loadshedding
        unit_of_measurement: mins
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 0 %}
          {{ [( as_timestamp(state_attr('sensor.load_shedding_area_capetown_6_durbanville','next_end_time')) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
          {%else%}
          Unknown
          {%endif%}
      next_loadshedding_duration:
        friendly_name: Calculated Next Loadshedding Duration
        unique_id: actual_next_loadshedding_duration
        unit_of_measurement: mins
        value_template: >
          {% set area_sensor = "sensor.load_shedding_area_capetown_6_durbanville"%}
          {% set area_schedule = state_attr(area_sensor, "forecast") %}
          {% set duration = 0 %}
          {% if area_schedule %}
            {% set next_slot_end = as_timestamp(area_schedule[:3][0].end_time) - as_timestamp(area_schedule[:3][0].start_time) %}
            {% set second_slot_end = as_timestamp(area_schedule[:3][1].end_time) - as_timestamp(area_schedule[:3][1].start_time) %}
            {% set diff = as_timestamp(area_schedule[:3][1].start_time) - as_timestamp(area_schedule[:3][0].start_time) %}
            {% set duration = as_timestamp(area_schedule[:3][0].end_time) - as_timestamp(area_schedule[:3][0].start_time) %}
            {% if diff == 7200 %}
              {% set duration = next_slot_end + second_slot_end %}
            {% endif%}
            {{ duration // 60 }}
          {% endif%}

timer:
  loadshedding_slot:
    duration: "02:35:00"
    restore: true

automation:
  - alias: start_loadshedding_slot_timer
    trigger:
      - platform: state
        entity_id: sensor.load_shedding_area_capetown_6_durbanville
        to: "on"
    condition:
      # make sure timer not already active
      - condition: state
        entity_id: timer.loadshedding_slot
        state: "idle"
    action:
      - service: timer.start
        data:
          entity_id: timer.loadshedding_slot
          duration: "{{ (states('sensor.next_loadshedding_duration')|int) * 60 }}"

  - alias: stop_loadshedding_slot_timer_grid_power_returned
    trigger:
      - platform: state
        entity_id: sensor.grid_mode
        to: "1" #stable after checking power
        for:
          seconds: 30
    condition:
      - condition: template
        value_template: >
          {{ trigger.from_state is not none and
            trigger.from_state.state not in ['unknown','unavailable'] }}
      - condition: state
        entity_id: timer.loadshedding_slot
        state: "active"
    action:
      - service: timer.finish
        data:
          entity_id: timer.loadshedding_slot

  - alias: Loadshedding forecast notification
    initial_state: "on"
    trigger:
      - entity_id: sensor.loadshedding_slot_forecast
        platform: state
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.loadshedding_slot_forecast
            state: "unavailable"
      - condition: template
        value_template: >
          {{ trigger.from_state.state != trigger.to_state.state }}
      - condition: template
        value_template: >
          {{ trigger.from_state.state != "unavailable" }}
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ":zap:"
          object: "Loadshedding forecast"
          target: "power-alerts"
          message: >
            {{ states.sensor.loadshedding_slot_forecast.state }}

  - alias: Upcoming slot notification
    initial_state: "on"
    trigger:
      - entity_id: sensor.time_till_loadshedding
        platform: state
        to: "15"
    condition:
      - condition: time
        before: "18:00:00"
        after: "14:00:00"
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ":zap:"
          object: "Loadshedding slot"
          target: "power-alerts"
          message: >
            Loadshedding slot in 15 minutes

  - alias: Reload "Load Shedding"
    description: "Reloads the integration every night to work around Issue #70/#71"
    trigger:
      - platform: time
        at: "00:00:00"
    condition: []
    actions:
      - variables:
          config_entry: '{{ config_entry_id(integration_entities("Load Shedding") | first) }}'
      - alias: Config entry found?
        if:
          - condition: template
            value_template: "{{ config_entry != None }}"
            alias: Config Entry var is set
        then:
          - data:
              entry_id: "{{ config_entry }}"
            action: homeassistant.reload_config_entry
            alias: Reload Config Entry
        else:
          - alias: Config Entry not Found
            stop: Config entry for Load Shedding not found
            error: true
    mode: single
