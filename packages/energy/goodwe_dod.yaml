---
input_number:
  set_goodwe_dod:
    name: Set Goodwe DoD
    min: 0
    max: 80
    mode: box
    unit_of_measurement: '%'

script:
  ######################################################################
  # Re-usable script to set the DoD via input
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.goodwe_set_dod
  #   data:
  #     forecast: "50"
  ######################################################################
  goodwe_set_dod:
    sequence:
      - alias: "Set variables"
        variables:
          dod: >
            {% set forecast_int = forecast|int %}
            {% if forecast_int >= 28 %}75
            {% elif forecast_int >= 23 and forecast_int < 28 %}70
            {% elif forecast_int >= 20 and forecast_int < 23 %}60
            {% elif forecast_int >= 18 and forecast_int < 20 %}50
            {% elif forecast_int >= 16 and forecast_int < 18 %}45
            {% elif forecast_int >= 12 and forecast_int < 16 %}40
            {% elif forecast_int >= 10 and forecast_int < 12 %}30n
            {% elif forecast_int >= 8 and forecast_int < 10 %}20
            {% else %}16{% endif -%}
      - choose:
          # IF lots of sun and high battery skip
          - conditions:
              - condition: template
                value_template: >
                  {{ states('climate.midea_ac_30786325862093') != "off" and (states('climate.midea_ac_30786325862093') not in ['fan_only','off','unavailable','unknown','none']) }}
              - condition: template
                value_template: >
                  {{ dod > 40 }}
            sequence:
              - alias: "Set variables"
                variables:
                  dod: >
                    {{ dod - 10 }}
              - condition: template
                value_template: >-
                  {{ dod|int != states('number.depth_of_discharge_on_grid')|int  }}
              - alias: "Set DoD on inverter"
                service: number.set_value
                data:
                  value: >
                    {{ dod }}
                target:
                  entity_id: number.depth_of_discharge_on_grid
              - alias: "Set Eco Charge SoC on inverter"
                service: number.set_value
                data:
                  value: >
                    {{ 100 - dod }}
                target:
                  entity_id: number.eco_mode_soc
              - alias: "Log action taken"
                service: script.log
                data:
                  icon: ':zap:'
                  object: 'GoodWe'
                  message: >
                    Setting lowered DoD to {{ dod }} based on {{ forecast|int }}kWh forecast
                    Setting Eco Charge SoC to {{ 100 - dod }}
        default:
          - condition: template
            value_template: >-
              {{ dod|int != states('number.depth_of_discharge_on_grid')|int  }}
          - alias: "Set DoD on inverter"
            service: number.set_value
            data:
              value: >
                {{ dod }}
            target:
              entity_id: number.depth_of_discharge_on_grid
          - alias: "Set Eco Charge SoC on inverter"
            service: number.set_value
            data:
              value: >
                {{ 100 - dod }}
            target:
              entity_id: number.eco_mode_soc
          - alias: "Log action taken"
            service: script.log
            data:
              icon: ':zap:'
              object: 'GoodWe'
              message: >
                Setting DoD to {{ dod }} based on {{ forecast|int }}kWh forecast
                Setting Eco Charge SoC to {{ 100 - dod }}

automation:
  # Input that sets DoD on GoodWe Inverter
  # Everything else will set this input. This allows for graphing+tracking.
  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: number.depth_of_discharge_on_grid
        platform: state
    action:
      - service: script.log
        data:
          icon: ':zap:'
          object: 'GoodWe'
          message: >
            DoD set to {{ states('number.depth_of_discharge_on_grid')|int }} - input value
    mode: queued
    max: 2

  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: number.eco_mode_soc
        platform: state
    action:
      - service: script.log
        data:
          icon: ':zap:'
          object: 'GoodWe'
          message: >
            Eco SoC set to {{ states('number.eco_mode_soc')|int }} - input value
    mode: queued
    max: 2

  ## set DoD at 6am after geyser was on for the morning
  - id: '1605879219606'
    alias: Goodwe DoD Morning
    description: Set max DoD in morning when day forecast more accurate
    mode: single
    trigger:
      - platform: time
        at: 06:00:00
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_energy_power
        below: '100'
        for:
          seconds: 15
      - platform: state
        entity_id: sensor.solcast_pv_forecast_forecast_remaining_today
    condition:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ trigger.platform == 'numeric_state' }}"
              - condition: template
                value_template: >-
                  {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
                  {{ (start_time < states('sensor.time') <= '06:00' and states('number.depth_of_discharge_on_grid')|int <= 16) or (states('sensor.time') == '06:00') }}
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ trigger.platform == 'time' or trigger.platform == 'state' }}"
              - condition: template
                value_template: "{{ states('sensor.time') < '06:00' }}"
              - condition: state
                entity_id: timer.main_geyser
                state: 'idle'
    action:
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.solcast_pv_forecast_forecast_remaining_today
            state: "unavailable"
      - service: script.goodwe_set_dod
        data:
          forecast: "{{ states('sensor.solcast_pv_forecast_forecast_remaining_today') }}"

  ## 16% at 10:00am
  - id: '1605879219607'
    alias: Goodwe DoD Day
    description: Set max DoD to 16% during the day - leave battery for evening use
    trigger:
      - platform: time
        at: '10:00:00'
      # If office AC is on turn at turn off pool
      # - platform: template
      #   value_template: >
      #     {{ ('07:00' <= now().time().strftime("%R") <= '15:00') and (states('climate.midea_ac_32985348871179') not in ['fan_only','off','unavailable','unknown','none']) }}
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.solcast_pv_forecast_forecast_today
            below: '30'
          - condition: template
            value_template: >
              {{ states('climate.midea_ac_32985348871179') != "off" and (states('climate.midea_ac_32985348871179') not in ['fan_only','off','unavailable','unknown','none']) }}
    action:
      - alias: "Set DoD on inverter"
        service: number.set_value
        target:
          entity_id: number.depth_of_discharge_on_grid
        data:
          value: >
            {% set soc_today = states('sensor.solcast_pv_forecast_forecast_today')|int %}
            {% if soc_today <= 10 %}16
            {% else %}16{% endif -%}
    mode: single

  # At 8pm set SoC based on forecast
  - alias: Goodwe DoD Night
    description: Set DoD based on conditions
    trigger:
      - platform: time
        at: '20:00:00'
    condition:
      # if current SoC above 75%
      - condition: numeric_state
        entity_id: sensor.battery_state_of_charge
        above: '70'
      # if battery SoH is above 50 for some safety
      - condition: numeric_state
        entity_id: sensor.battery_state_of_health
        above: '50'
    action:
      # set DoD
      - service: script.goodwe_set_dod
        data:
          forecast: "{{ states('sensor.solcast_pv_forecast_forecast_tomorrow') }}"
      # cancel timers
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser
      # turn off geysers
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser
    mode: single

  ## When Eskom turns on LoadShedding set 16%
  # - alias: Goodwe 16% when LoadShedding start above stage 4
  #   trigger:
  #     - platform: numeric_state
  #       entity_id: sensor.eskom_loadshedding_stage
  #       above: 4
  #       for:
  #         minutes: 1
  #   condition:
  #     - condition: numeric_state
  #       entity_id: sensor.eskom_loadshedding_stage
  #       above: 4
  #     - condition: numeric_state
  #       entity_id: sensor.solcast_pv_forecast_forecast_today
  #       below: 26
  #   action:
  #     - alias: "Set DoD on inverter"
  #       service: number.set_value
  #       data:
  #         value: 16
  #       target:
  #         entity_id: number.depth_of_discharge_on_grid
  #   mode: single

  ## When loadshedding and there a chance geyser needs to run after 4pm
  - alias: Goodwe DoD 16%
    description: Goodwe 16% when geysers run under conditions
    mode: single
    trigger:
      - platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'on'
      - platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ ('00:00' <= states('sensor.time') <= '06:00') or ('15:00' <= states('sensor.time') < '23:59') }}"
    action:
      - choose:
          # IF lots of sun and high battery skip
          - conditions:
              - condition: numeric_state
                entity_id: sensor.solcast_pv_forecast_forecast_today
                above: '26.1'
              - condition: numeric_state
                entity_id: sensor.battery_state_of_charge
                above: '50'
            sequence:
              - delay:
                  minutes: "{{ range(1, 11)|random }}"
        # ELSE go 16
        default:
          - alias: "Set DoD on inverter"
            service: number.set_value
            data:
              value: 16
            target:
              entity_id: number.depth_of_discharge_on_grid
