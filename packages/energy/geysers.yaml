---
input_boolean:
  morning_geyser_front:
    name: Geyser(F) morning slot
  morning_geyser_main:
    name: Geyser(M) morning slot

input_datetime:
  main_geyser_on_time:
    name: Geyser(M) on time
    has_date: false
    has_time: true
  front_geyser_on_time:
    name: Geyser(F) on time
    has_date: false
    has_time: true

timer:
  main_geyser:
    name: Geyser(M) Timer
    duration: '02:00:00'
  front_geyser:
    name: Geyser(F) Timer
    duration: '02:00:00'

script:
  ######################################################################
  # Re-usable script to start main bedroom geyser
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.geyser_on_mainbedroom
  #   data:
  #      N/A
  ######################################################################
  geyser_on_mainbedroom:
    sequence:
      - repeat:
          while:
            - condition: state
              entity_id: switch.main_bathroom_geyser
              state: 'unavailable'
          sequence:
            - delay:
                seconds: 30
      - alias: "Set variables"
        variables:
          duration: >
            {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
            {% set today_name = sensor_names[now().weekday()] %}
            {% if today_name == 'sunday_disable' %}{{ 300 | int * 60 }}
            {% elif '17:00' <= states('sensor.time') <= '18:00' %}{{ 180 | int * 60 }}
            {% elif '00:00' <= states('sensor.time') <= '06:00' %}{{ 15 | int * 60 }}
            {% else %}{{ 180 | int * 60 }}{% endif -%}
      # If device is unavailable, need a retry loop here
      - alias: "Repeat the sequence UNTIL the conditions are true"
        repeat:
          sequence:
            # wait time
            - delay:
                milliseconds: 200
          until:
            - condition: state
              entity_id: switch.main_bathroom_geyser
              state: "off"
            - condition: not
              conditions:
                - condition: state
                  entity_id: switch.main_bathroom_geyser
                  state: "unavailable"
      # Repeat end
      - service: timer.start
        data_template:
          entity_id: timer.main_geyser
          duration: "{{ duration }}"
      - delay: '00:00:01' # Waits 1 seconds
      - service: switch.turn_on
        data:
          entity_id: switch.main_bathroom_geyser
      # Turn off front geyser
      - service: timer.finish
        target:
          entity_id: timer.front_geyser

  ######################################################################
  # Re-usable script to start main bedroom geyser
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.front_bathroom_geyser
  #   data:
  #      N/A
  ######################################################################
  geyser_on_front:
    sequence:
      - repeat:
          while:
            - condition: state
              entity_id: switch.front_bathroom_geyser
              state: 'unavailable'
          sequence:
            - delay:
                seconds: 30
      - alias: "Set variables"
        variables:
          duration: >
            {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
            {% set today_name = sensor_names[now().weekday()] %}
            {% if today_name == 'sunday_disable' %}{{ 300 | int * 60 }}
            {% elif '17:00' <= states('sensor.time') <= '18:00' %}{{ 180 | int * 60 }}
            {% elif '00:00' <= states('sensor.time') <= '06:00' %}{{ 15 | int * 60 }}
            {% else %}{{ 180 | int * 60 }}{% endif -%}
      - service: timer.start
        data_template:
          entity_id: timer.front_geyser
          duration: "{{ duration }}"
      - delay: '00:00:01' # Waits 1 seconds
      - service: switch.turn_on
        data:
          entity_id: switch.front_bathroom_geyser
      # Turn off main geyser
      - delay: '00:00:01' # Waits 1 seconds
      - service: timer.finish
        target:
          entity_id: timer.main_geyser

automation:
  ### Main Geyser ###
  # Main geyser on based on input time
  - alias: Turn on main geyser
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: time
        at: '12:45:00'
      - platform: numeric_state
        entity_id: sensor.front_bathroom_geyser_energy_power
        below: '100'
        for:
          seconds: 60
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: timer.front_geyser
            state: 'paused'
    #   - condition: or
    #     conditions:
    #       - condition: template
    #         value_template: "{{ trigger.from_state and trigger.from_state.state != 'unavailable' }}"
    #       - condition: template
    #         value_template: "{{ not trigger.from_state }}"
    #   - condition: numeric_state
    #     entity_id: sensor.front_bathroom_geyser_energy_power
    #     below: '50'
    action:
      # - alias: "Log action taken"
      #   service: script.log
      #   data:
      #     icon: ':zap:'
      #     object: 'Geyser - main bedroom'
      #     message: >
      #       main bedroom geyser trigger - before conditions
      #       Trigger:
      #       ```{{ trigger }}```
      - delay: '00:00:10' # Waits 10 seconds
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.front_bathroom_geyser_energy_power
            below: '100'
          - condition: state
            entity_id: switch.front_bathroom_geyser
            state: 'unavailable'
      # - alias: "Log action taken"
      #   service: script.log
      #   data:
      #     icon: ':zap:'
      #     object: 'Geyser - main bedroom'
      #     message: >
      #       main bedroom geyser trigger - after conditions
      #       Trigger:
      #       ```{{ trigger }}```
      - choose:
          # Turn on between 11am and 2pm for sun times
          - conditions:
              - condition: or
                conditions:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ ('10:00' <= states('sensor.time') < '16:00') }}"
                      - condition: state
                        entity_id: timer.main_geyser
                        state: 'idle'
                        for:
                          minutes: 75
            sequence:
              - service: script.geyser_on_mainbedroom
              - alias: "Log action taken"
                service: script.log
                data:
                  icon: ':zap:'
                  object: 'Geyser - main bedroom'
                  message: >
                    Turning on main bedroom geyser
                    (Turn on between 11am and 2pm for sun times)
                    Trigger:
                    ```{{ trigger }}```
          # Turn on late PM only if haven't been on in previous 6 hours
          - conditions:
              - condition: state
                entity_id: timer.main_geyser
                state: 'idle'
                for:
                  hours: 6
              - condition: template
                value_template: "{{ ('15:00' <= states('sensor.time') < '18:05') }}"
            sequence:
              - service: script.geyser_on_mainbedroom
              - alias: "Log action taken"
                service: script.log
                data:
                  icon: ':zap:'
                  object: 'Geyser - main bedroom'
                  message: >
                    Turning on main bedroom geyser
                    (Turn on late PM only if haven't been on in previous 6 hours)
                    Trigger:
                    ```{{ trigger }}```
          # Turn on early AM and late PM only if haven't been on in previous 6 hours
          # Also, if average temp below 21degree
          - conditions:
              - condition: state
                entity_id: timer.main_geyser
                state: 'idle'
                for:
                  hours: 6
              - condition: or
                conditions:
                  - condition: or
                    conditions:
                      - condition: numeric_state
                        entity_id: sensor.average_temperature_outside_last_1_day
                        below: '19.4'
                      - condition: state
                        entity_id: input_boolean.morning_geyser_main
                        state: 'on'
                  # IF lots of sun and high battery also turn on
                  - condition: and
                    conditions:
                      - condition: numeric_state
                        entity_id: sensor.average_temperature_outside_last_1_day
                        below: '24.5'
                      - condition: numeric_state
                        entity_id: sensor.solcast_forecast_energy_today_predicted
                        above: '26.1'
                      - condition: numeric_state
                        entity_id: sensor.goodwe_battery_soc
                        above: '50'
              - condition: template
                value_template: "{{ ('02:00' <= states('sensor.time') <= '06:00')  }}"
              - condition: template
                value_template: "{{ trigger.platform != 'numeric_state' }}"
            sequence:
              - service: script.geyser_on_mainbedroom
              - alias: "Log action taken"
                service: script.log
                data:
                  icon: ':zap:'
                  object: 'Geyser - main bedroom'
                  message: >
                    Turning on main bedroom geyser
                    (Turn on early AM and late PM)
                    Trigger:
                    ```{{ trigger }}```
        # No conditions met so log and do nothing (exceptions to logging apply)
        # default:
        #   # - condition: template
        #   #   value_template: "{{ not (trigger.platform == 'template' and trigger.entity_id == 'sensor.time') }}"
        #   # - condition: template
        #   #   value_template: "{{ not (trigger.platform == 'time') }}"
        #   - alias: "Log action taken"
        #     service: script.log
        #     data:
        #       icon: ':zap:'
        #       object: 'Geyser - main bedroom'
        #       message: >
        #         Not turning on main bedroom geyser because no conditions met
        #         Trigger:
        #         ```{{ trigger }}```

  # start timer when turned on
  - alias: Start timer after Turn on main geyser
    trigger:
      - platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.main_geyser
        state: 'idle'
    action:
      - choose:
          # Turn on only 1 hour if before 6am
          - conditions:
              # - condition: state
              #   entity_id: timer.loadshedding_slot
              #   state: 'idle'
              - condition: template
                value_template: "{{ ('00:00' <= states('sensor.time') < '06:00') }}"
            sequence:
              - service: timer.start
                data_template:
                  entity_id: timer.main_geyser
                  duration: >
                    {{ 45 | int * 60 }}
        # No conditions met so default time
        default:
          - service: timer.start
            data_template:
              entity_id: timer.main_geyser
              duration: >
                {{ 180 | int * 60 }}

  # Main geyser off when timer finish
  - alias: Turn off main geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_geyser
      - platform: time
        at: '5:55:00'
      - platform: time
        at: '5:58:00'
      - platform: time
        at: '5:59:00'
      - platform: time
        at: '18:50:00'
      - platform: time
        at: '18:55:00'
      - platform: time
        at: '18:59:00'
      - platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'on'
        for: '04:00:00'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser

  - alias: Turn off main geyser after load drop
    trigger:
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_energy_power
        below: '100'
        for:
          seconds: 60
    condition:
      - condition: or
        conditions:
          - condition: template
            value_template: "{{ trigger.from_state and trigger.from_state.state != 'unavailable' }}"
          - condition: template
            value_template: "{{ not trigger.from_state }}"
    action:
      - service: timer.finish
        data_template:
          entity_id: timer.main_geyser
      - delay: '00:00:01' # Waits 1 seconds
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser

  ### Front Geyser ###
  # Front geyser on based on input time (changed to fix 7pm if never on for the day)
  - alias: Turn on front geyser
    trigger:
      - platform: numeric_state
        entity_id: sensor.solcast_pv_forecast_forecast_this_hour
        above: 1800
        id: pvforecast
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      #- platform: time
      #  at: '10:35:00'
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.main_bathroom_geyser_energy_power
            below: '100'
          - condition: state
            entity_id: switch.main_bathroom_geyser
            state: 'unavailable'
    action:
      - choose:
          # Turn on between 9am and 11am for sun times using forecast
          - conditions:
              - condition: trigger
                id: pvforecast
              - condition: template
                value_template: "{{ states('sensor.time') <= (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
            sequence:
              - service: script.geyser_on_front
          # Turn on between 11am and 2pm for sun times
          - conditions:
              # - condition: state
              #   entity_id: timer.loadshedding_slot
              #   state: 'idle'
              - condition: template
                value_template: "{{ ('10:30' <= states('sensor.time') <= '14:00') }}"
            sequence:
              - service: script.geyser_on_front
          # Turn on early AM and late PM only if haven't been on in previous 6 hours
          # Also, if average temp below 21degree
          - conditions:
              - condition: state
                entity_id: timer.front_geyser
                state: 'idle'
                for:
                  hours: 6
              - condition: or
                conditions:
                  - condition: or
                    conditions:
                      - condition: numeric_state
                        entity_id: sensor.average_temperature_outside_last_1_day
                        below: '19.4'
                      - condition: state
                        entity_id: input_boolean.morning_geyser_front
                        state: 'on'
                  # IF lots of sun and high battery also turn on
                  - condition: and
                    conditions:
                      - condition: numeric_state
                        entity_id: sensor.average_temperature_outside_last_1_day
                        below: '24.5'
                      - condition: numeric_state
                        entity_id: sensor.solcast_forecast_energy_today_predicted
                        above: '26.1'
                      - condition: numeric_state
                        entity_id: sensor.goodwe_battery_soc
                        above: '50'
              - condition: template
                value_template: "{{ ('02:00' <= states('sensor.time') <= '06:00')  }}"
              - condition: template
                value_template: "{{ trigger.platform != 'numeric_state' }}"
            sequence:
              - service: script.geyser_on_front
        # No conditions met so log and do nothing
        default:
          - condition: template
            value_template: "{{ not (trigger.platform == 'template' and trigger.entity_id == 'sensor.time') }}"
          - condition: template
            value_template: "{{ not (trigger.platform == 'time') }}"
          - alias: "Log action taken"
            service: script.log
            data:
              icon: ':zap:'
              object: 'Geyser - front'
              message: >
                Not turning on front geyser because no conditions met

  # start timer when turned on
  - alias: Start timer after Turn on front geyser
    trigger:
      - platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.front_geyser
        state: 'idle'
    action:
      - service: timer.start
        data_template:
          entity_id: timer.front_geyser
          duration: >
            {{ 180 | int * 60 }}

  # front geyser off when timer finish (and main then on to chain)
  - alias: Turn off front geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.front_geyser
      - platform: time
        at: '6:25:00'
      - platform: time
        at: '6:29:00'
      - platform: time
        at: '6:30:00'
      - platform: time
        at: '18:50:00'
      - platform: time
        at: '18:55:00'
      - platform: time
        at: '18:59:00'
      - platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'on'
        for: '04:00:00'
    action:
      - service: script.switch_retry_off
        data:
          target: switch.front_bathroom_geyser

  # Geyser: Start when power return with paused timer
  - alias: "Geyser: Start when power return with paused timer"
    trigger:
      - id: main-geyser-un-to-off
        platform: state
        entity_id: switch.main_bathroom_geyser
        from: 'unavailable'
        to: 'off'
        for:
          seconds: 30
      - id: main-geyser-un-to-on
        platform: state
        entity_id: switch.main_bathroom_geyser
        from: 'unavailable'
        to: 'on'
        for:
          seconds: 30
      - id: front-geyser-un-to-off
        platform: state
        entity_id: switch.front_bathroom_geyser
        from: 'unavailable'
        to: 'off'
        for:
          seconds: 30
      - id: front-geyser-un-to-on
        platform: state
        entity_id: switch.front_bathroom_geyser
        from: 'unavailable'
        to: 'on'
        for:
          seconds: 30
    action:
      # main_geyser
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: trigger
                    id: main-geyser-un-to-on
                  - condition: trigger
                    id: main-geyser-un-to-off
              - condition: state
                entity_id: timer.main_geyser
                state: 'paused'
            sequence:
              - service: timer.start
                data:
                  entity_id: timer.main_geyser
              - service: switch.turn_on
                data:
                  entity_id: switch.main_bathroom_geyser
      # front geyser
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: trigger
                    id: front-geyser-un-to-on
                  - condition: trigger
                    id: front-geyser-un-to-off
              - condition: state
                entity_id: timer.front_geyser
                state: 'paused'
            sequence:
              - service: timer.start
                data:
                  entity_id: timer.front_geyser
              - service: switch.turn_on
                data:
                  entity_id: switch.front_bathroom_geyser

  # Geyser: Stop when power lost with paused timer
  - alias: "Geyser: Stop when power lost with paused timer"
    trigger:
      - id: main-geyser-un
        platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'unavailable'
        for:
          seconds: 30
      - id: front-geyser-un
        platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'unavailable'
        for:
          seconds: 30
    action:
      - delay:
          seconds: 5
      # - condition: state
      #   entity_id: sensor.energy_mode_code
      #   state: '4'  # inverter in off-grid mode
      # main_geyser
      - choose:
          - conditions:
              - condition: trigger
                id: main-geyser-un
              - condition: state
                entity_id: timer.main_geyser
                state: 'active'
            sequence:
              - service: timer.pause
                data:
                  entity_id: timer.main_geyser
              - service: switch.turn_off
                data:
                  entity_id: switch.main_bathroom_geyser
      # front geyser
      - choose:
          - conditions:
              - condition: trigger
                id: front-geyser-un
              - condition: state
                entity_id: timer.front_geyser
                state: 'active'
            sequence:
              - service: timer.pause
                data:
                  entity_id: timer.front_geyser
              - service: switch.turn_off
                data:
                  entity_id: switch.front_bathroom_geyser
