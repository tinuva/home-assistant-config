### Zigbee2tasmota Home Assistant MQTT demultiplexer automations
# 1. Based on the original work from https://github.com/tyjtyj/tasmota-zigbee-homeassistant
# 2. Added auto discovery based on help from https://community.home-assistant.io/t/mqtt-demultiplexer-automatic-sensor-discovery-for-tasmota2zigbee/237900/4
# 3. Added switch based on info from https://github.com/arendst/Tasmota/issues/8226 and now https://tasmota.github.io/docs/Zigbee/#examples

### Requirements
# 1. Code requires topic set to "tasmota_zbbridge" in Configuration -> Configure MQTT on the gateway. If different, find/replace in this file with yours
# 2. Pair device to gateway. On the console type: ZbPermitjoin 1
# 3. Assign a name to the device using short addrress. Once the name is assigned, home assistant auto discovery will pick it up.
#    On the console type: ZbName 0x1CD1,Front Bathroom

### Devices tested and confirmed working

# Sonoff Basic ZBR3 (router/repeater)
# https://www.banggood.com/SONOFF-BASICZBR3-Zig-Bee-DIY-Smart-Switch-Controlled-Via-SmartThing-APP-Works-With-SmartThings-Hub-Alexa-p-1593931.html?p=DX050122090268201806&custlinkid=1222451

# Sonoff Zigbee Door/Window sensor
# https://www.banggood.com/Original-Aqara-ZigBee-Version-Window-Door-Sensor-Smart-Home-Kit-Remote-Alarm-Xiaomi-Eco-System-p-1149705.html?p=DX050122090268201806&custlinkid=1222463

# Xiaomi Aqara Temperature/Humidity sensor
# https://www.banggood.com/XIAOMI-Portable-Real-time-High-Accuracy-Temperature-Humidity-Intelligent-Sensor-Control-Smart-Detector-Auto-Alarm-Monitoring-Home-Office-Thermometer-Measurer-p-1632931.html?p=DX050122090268201806&custlinkid=1189773

# Xiaomi Aqara button (press button trigger stuff)
# https://www.banggood.com/Original-Aqara-ZigBee-Wireless-Smart-Switch-Upgrade-Version-Smart-Home-Remote-Controller-Button-From-Xiaomi-Mijia-Eco-System-p-1478531.html?p=DX050122090268201806&custlinkid=1222446
# Sample config - Available actions: Click and Hold
# automation:
#   # Kitchen button
#   - alias: 'MQTT Zigbee Button Kitchen single click'
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/zigbee/0xF4D6/Click'
#         payload: 'single'
#     action:
#       - service: input_boolean.toggle
#         data:
#           entity_id: input_boolean.kitchenwork

---
# Start of package. package/tasmota_zigbee.yaml

# automation:
#   ## Zigbee2tasmota MQTT demultiplexer automations
#   # Motion sensors
#   - alias: 'MQTT Zigbee Occupancy'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'Occupancy' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/binary_sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Occupancy/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }}",
#               "device_class": "occupancy",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Occupancy",
#               "payload_off": "0",
#               "payload_on": "1",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_occupancy",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Occupancy
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Occupancy }}
#           retain: true

#   # Opening (Door) sensors
#   - alias: 'MQTT Zigbee Zone Status'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'ZoneStatusChange' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/binary_sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}ZoneStatusChange/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }}",
#               "device_class": "opening",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/ZoneStatusChange",
#               "payload_off": "0",
#               "payload_on": "1",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_zone",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/ZoneStatusChange
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].ZoneStatusChange }}
#           retain: true

#   # Humidity
#   - alias: 'MQTT Zigbee Humidity'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'Humidity' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#           {{ trigger.payload_json.ZbReceived[code].Humidity|float < 101 }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Humidity/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Humidity",
#               "device_class": "humidity",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Humidity",
#               "expire_after": "7200",
#               "unit_of_measurement": "%",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_humidity",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Humidity
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Humidity }}
#           retain: true

#   # Temperature
#   - alias: 'MQTT Zigbee Temperature'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'Temperature' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#           {{ trigger.payload_json.ZbReceived[code].Temperature|float > -75 }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Temperature/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Temperature",
#               "device_class": "temperature",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Temperature",
#               "expire_after": "7200",
#               "unit_of_measurement": "Â°C",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_temperature",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Temperature
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Temperature }}
#           retain: true

#   # Pressure
#   - alias: 'MQTT Zigbee Pressure'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'Pressure' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Pressure/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Pressure",
#               "device_class": "pressure",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Pressure",
#               "expire_after": "7200",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_pressure",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Pressure
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Pressure }}
#           retain: true

#   # Illuminance
#   - alias: 'MQTT Zigbee Illuminance'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: >
#           {{ 'Illuminance' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Illuminance/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Illuminance",
#               "device_class": "illuminance",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Illuminance",
#               "expire_after": "7200",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_illuminance",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Illuminance
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Illuminance }}
#           retain: true

#   # Battery
#   - alias: 'MQTT Zigbee Battery'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: "{{ 'BatteryPercentage' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}Battery/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Battery",
#               "device_class": "battery",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Battery",
#               "expire_after": "7200",
#               "unit_of_measurement": "%",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_battery",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Battery
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].BatteryPercentage }}
#           retain: true

#   # LinkQuality
#   - alias: 'MQTT Zigbee LinkQuality'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: "{{ 'LinkQuality' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}LinkQuality/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }} LinkQuality",
#               "icon": "mdi:wifi",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/LinkQuality",
#               "expire_after": "7200",
#               "unit_of_measurement": "LQI",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_linkquality",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/LinkQuality
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].LinkQuality }}
#           retain: true

#   # Button click
#   - alias: 'MQTT Zigbee Button Click'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: "{{ 'click' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Click
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].click }}
#           #retain: true
#       - delay:
#           seconds: 2
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Click
#           payload: ""
#           #retain: true

#   # Button action
#   - alias: 'MQTT Zigbee Button Hold'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: "{{ 'action' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Action
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].action }}
#           #retain: true
#       - delay:
#           seconds: 2
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Action
#           payload: ""
#           #retain: true

#   # Switch (WIP)
#   - alias: 'MQTT Zigbee Switch State'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/tasmota_zbbridge/SENSOR'
#     condition:
#       - condition: template
#         value_template: "{{ 'Power' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
#       - condition: template
#         value_template: >
#           {{ 'Name' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: homeassistant/switch/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/config
#           retain: true
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {
#               "name": "{{ trigger.payload_json.ZbReceived[code].Name }}",
#               "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Power",
#               "command_topic": "tele/zigbee/{{ trigger.payload_json.ZbReceived[code].Device }}/SetPower",
#               "state_off": "0",
#               "state_on": "1",
#               "payload_off": "Off",
#               "payload_on": "On",
#               "unique_id": "{{ trigger.payload_json.ZbReceived[code].Device }}_switch",
#               "device": {"mf": "Tasmota", "mdl": "Zigbee", "identifiers": ["{{ trigger.payload_json.ZbReceived[code].Device }}"], "name": "{{ trigger.payload_json.ZbReceived[code].Name }}"}
#             }
#       - service: mqtt.publish
#         data_template:
#           topic: >
#             tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] |lower|replace(' ','_') }}/Power
#           payload: >
#             {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
#             {{ trigger.payload_json.ZbReceived[code].Power }}
#           retain: true

#   # Switch (WIP)
#   - alias: 'MQTT Zigbee Switch Set Power'
#     mode: parallel
#     initial_state: true
#     trigger:
#       - platform: mqtt
#         topic: 'tele/zigbee/+/SetPower'
#     action:
#       - service: mqtt.publish
#         data_template:
#           topic: cmnd/tasmota_zbbridge/ZbSend
#           payload: >
#             {"Device":"{{ (trigger.topic.split('/') )[2] }}","Send":{"Power":"{{ trigger.payload }}"}}
#           retain: false
