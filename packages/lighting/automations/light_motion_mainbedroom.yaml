---
timer:
  # When calling the start service on a timer that is already running, it resets
  # the duration it will need to finish and restart the timer without triggering
  # a canceled or finished event. This, for example, makes it easy to create
  # timed lights that get triggered by motion. Starting a timer triggers a
  # started event unless the timer is paused, in that case, it triggers a
  # restarted event.
  mainbedroomlight:
    duration: '00:10:00'

automation:
   # Timer end = Turn off
  - alias: Turn off mainbedroom lights after timer finish
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.mainbedroomlight
    action:
      service: light.turn_off
      data:
        entity_id: light.main_bedroom_main_bedroom
        transition: 30

  # Motion = Turn on
  - alias: Turn on mainbedroom lights when there is movement
    trigger:
      - platform: state
        entity_id: binary_sensor.main_bedroom_pir
        to: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state  # 'night' condition: from sunset until sunrise
            entity_id: sun.sun
            state: 'below_horizon'
      - condition: or
        conditions:
          - condition: state
            entity_id: light.main_bedroom_main_bedroom
            state: 'off'
            for:
              seconds: 15
          - condition: state
            entity_id: light.main_bedroom_main_bedroom
            state: 'on'
    action:
      - service: light.turn_on
        data_template:
          entity_id: light.main_bedroom_main_bedroom
          # transition: >
          #   {%- if(is_state('binary_sensor.either_parent_phones_charging','on')) -%}
          #   300
          #   {%- else -%}
          #   30
          #   {%- endif -%}
          # brightness_pct: >-
          #   {% set hours = [[0,18],[500,19],[600,20],[630,21],[700,25],[730,30],
          #                 [800,30],[900,30],[1630,30],[1700,30],[1730,30],
          #                 [1800,30],[1830,30],[1900,26],[1930,24],[2000,23],
          #                 [2030,22],[2100,21],[2200,20],[2230,19],[2300,18]] %}
          #   {% set t = states('sensor.time').replace(':','')|int %}
          #   {% set ns = namespace(level = 0) %}
          #   {% for h in hours if t >= h[0] %}
          #     {% set ns.level = h[1] %}
          #   {% endfor %}
          #   {%- if(is_state('alarm_control_panel.home_alarm','armed_home') or is_state('binary_sensor.either_parent_phones_charging','on')) -%}
          #   14
          #   {%- else -%}
          #   {{ ns.level }}
          #   {%- endif -%}
      - condition: state
        entity_id: timer.morning_routine
        state: 'idle'
      - service: timer.start
        data:
          entity_id: timer.mainbedroomlight
          duration: >
            {% set time = states('sensor.time') %}
            {% if(is_state('alarm_control_panel.home_alarm','armed_home')) %}
              15
            {% elif '20:00' <= time  <= '23:59' %}
              {{10*60|int}}
            {% elif '04:40' <= time <= '05:30' and is_state('binary_sensor.either_parent_phones_charging','off') %}
              {{15*60|int}}
            {% elif '00:00' <= time <= '05:29' %}
              {{1*60|int}}
            {% elif '05:30' <= time <= '07:29' %}
              {{15*60|int}}
            {% else %}
              {{2*60|int}}
            {%- endif -%}

  - alias: Sleep mode mainbedroom lights
    trigger:
      - platform: state
        entity_id: binary_sensor.either_parent_phones_charging
      - platform: state
        entity_id: alarm_control_panel.home_alarm
    action:
      - choose:
          # Morning
          - conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity_id: binary_sensor.either_parent_phones_charging
                    state: 'on'
                  - condition: state
                    entity_id: alarm_control_panel.home_alarm
                    state: 'armed_home'
              - condition: state
                entity_id: timer.morning_routine
                state: 'idle'
            sequence:
              - service: switch.turn_on
                data:
                  entity_id: switch.adaptive_lighting_sleep_mode_main_bedroom
          - conditions:
              - condition: state
                entity_id: binary_sensor.either_parent_phones_charging
                state: 'off'
              - condition: state
                entity_id: alarm_control_panel.home_alarm
                state: 'disarmed'
            sequence:
              - service: switch.turn_off
                data:
                  entity_id: switch.adaptive_lighting_sleep_mode_main_bedroom
