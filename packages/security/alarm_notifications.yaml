---
# AC Power Lost
# AC Power Restored

binary_sensor:
  - platform: template
    sensors:
      alarm_trouble:
        #entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'trouble') }}"
  - platform: template
    sensors:
      alarm_battery_trouble:
        #entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'bat_trouble') }}"
  - platform: template
    sensors:
      alarm_ac_power:
        #entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'ac_present') }}"

automation:
  ### Notify alarm state change
  - id: '1586327112617'
    alias: Notify Alarm Armed State
    description: Notify when Alarm panel is armed or disarmed
    trigger:
      - entity_id: alarm_control_panel.home_alarm
        platform: state
    condition:
      - condition: template
        value_template: "{{ not is_state('alarm_control_panel.home_alarm', 'triggered') }}"
    action:
      - choose:
          # If arming home or from disarming home - log instead of alert
          - conditions:
              - condition: or
                conditions:
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'armed_home' }}
                  - condition: template
                    value_template: >
                      {{ trigger.from_state.state == 'armed_home' }}
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'exit_delay_in_progress' }}
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'pending' }}
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'unavailable' }}
                  - condition: template
                    value_template: >
                      {{ trigger.from_state.state == 'unavailable' }}
            sequence:
              - service: script.log
                data:
                  icon: ':rotating_light:'
                  object: 'Home Alarm'
                  message: >
                    Home alarm {{ states.sensor.home_alarm_keypad.state }}
        default:
          - service: script.alert
            data:
              icon: ':rotating_light:'
              object: 'Home Alarm'
              message: >
                Home alarm {{ states.sensor.home_alarm_keypad.state }}

  ### Notify sensor that triggered alarm --- WIP
  - id: '1586327112618'
    alias: Notify Alarm Armed Triggered
    description: Notify when Alarm panel is triggered
    trigger:
      - entity_id: alarm_control_panel.home_alarm
        platform: state
        to: 'triggered'
    condition: []
    action:
      - service: script.alert
        data:
          icon: ':rotating_light:'
          object: 'Home Alarm'
          message: >
            *ALARM TRIGGERED!* on: {{- '\n' -}}
            {{ states.sensor.armed_away.state }}

  ### Notify keypad error
  - alias: Notify when Alarm panel keypad has zone/sensor fault
    description: Notify when Alarm panel keypad has zone/sensor fault
    trigger:
      - entity_id: sensor.home_alarm_keypad
        platform: state
        to: 'zone/sensor fault'
      - entity_id: binary_sensor.alarm_trouble
        platform: state
        to: 'on'
      - entity_id: binary_sensor.alarm_trouble
        platform: state
        to: 'off'
    condition:
      - condition: template
        value_template: >
          {{ trigger.from_state.state != trigger.to_state.state }}
      - condition: template
        value_template: >
          {{ trigger.from_state.state != "unavailable" }}
    action:
      - service: script.log
        data:
          icon: ':rotating_light:'
          object: 'Home Alarm'
          message: >
            *ALARM Fault* {% if(states.binary_sensor.alarm_trouble.state == "off") %}Resolved{% endif %}{{- '\n' -}}
            Current keypad state: {{ states.sensor.home_alarm_keypad.state }}

  ### Notify battery error
  - alias: Notify when Alarm panel keypad has zone/sensor fault
    description: Notify when Alarm panel keypad has zone/sensor fault
    trigger:
      - entity_id: binary_sensor.alarm_battery_trouble
        platform: state
        to: 'on'
      - entity_id: binary_sensor.alarm_battery_trouble
        platform: state
        to: 'off'
    condition: []
    action:
      - service: script.log
        data:
          icon: ':rotating_light:'
          object: 'Home Alarm'
          message: >
            *ALARM Battery Fault!* {% if (states.binary_sensor.alarm_battery_trouble.state == "off") %}Resolved{% endif %}

  ### Notify front beam stuck error
  - alias: Notify when front beam stuck on
    description: Notify when front beam stuck on
    trigger:
      - platform: state
        entity_id: binary_sensor.front_beam
        to: 'on' #'unavailable'
        for:
          hours: 0
          minutes: 15
          seconds: 0
    condition: []
    action:
      - service: script.log
        data:
          icon: ':rotating_light:'
          object: 'Home Alarm'
          message: >
             *ALARM Fault on Front Beam!* {% if (states.binary_sensor.front_beam.state == "off") %}Resolved{% endif %}

  - alias: Notify Repeat when front beam stuck on
    description: Notify Repeat when front beam stuck on
    trigger:
      - platform: time_pattern
        hours: '1'
    condition:
      - condition: state
        entity_id: binary_sensor.front_beam
        state: 'on'
        for:
          minutes: 30
    action:
      - service: script.log
        data:
          icon: ':rotating_light:'
          object: 'Home Alarm'
          message: >
            *ALARM Fault on Front Beam!* {% if (states.binary_sensor.front_beam.state == "off") %}Resolved{% endif %}
