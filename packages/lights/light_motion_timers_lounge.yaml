---
timer:
  # When calling the start service on a timer that is already running, it resets
  # the duration it will need to finish and restart the timer without triggering
  # a canceled or finished event. This, for example, makes it easy to create
  # timed lights that get triggered by motion. Starting a timer triggers a
  # started event unless the timer is paused, in that case, it triggers a
  # restarted event.
  loungelight:
    duration: '00:10:00'

automation:
  ### Lounge Lights
  # Timer end = Turn off
  - alias: Turn off lounge lights after timer finish
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.loungelight
    action:
      service: light.turn_off
      data:
        entity_id: light.lounge
        transition: 10

  ### Lounge Lights
  # Motion = Turn on
  - alias: Turn on lounge lights when there is movement
    trigger:
      - platform: state
        entity_id: binary_sensor.lounge_pir
        to: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state  # 'night' condition: from sunset until sunrise
            entity_id: sun.sun
            state: 'below_horizon'
          - condition: template # if plex is in playing mode, do not start this automation
            value_template: "{{ not is_state('media_player.plex_plex_for_android_tv_bravia_vu1', 'playing') }}"
          - condition: template # if plex is in playing mode, do not start this automation
            value_template: "{{ not is_state('media_player.plex_plex_for_kodi_sonytv', 'playing') }}"
          - condition: template # if plex is in playing mode, do not start this automation
            value_template: "{{ not is_state('media_player.plex_plex_for_android_tv_shield_android_tv', 'playing') }}"
    action:
      - service: light.turn_on
        data_template:
          entity_id: light.lounge
          # transition: 10
          # brightness: >-
          #   {%- if(is_state('alarm_control_panel.home_alarm','armed_home')) -%}
          #   30
          #   {%- else -%}
          #   60
          #   {%- endif -%}
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: 'armed_home'
      - service: timer.start
        data:
          entity_id: timer.loungelight
          duration: >
            {% set time = states('sensor.time') %}
            {% if(is_state('alarm_control_panel.home_alarm','armed_home')) %}
              120
            {% elif '20:00' <= time  <= '23:59' %}
              {{60*60|int}}
            {% elif '00:00' <= time <= '05:29' %}
              {{2*60|int}}
            {% else %}
              {{5*60|int}}
            {%- endif -%}
